{"version":3,"sources":["components/header.js","components/test.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Component","refreshPage","window","location","reload","$","document","ready","keyup","hashmap","Map","characters","this","val","ch","length","test","isAlpha","toUpperCase","has","occ","get","set","console","log","e","attr","append","text","i","String","fromCharCode","remove","Test","id","placeholder","rows","type","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6OAEMA,E,4JACF,WACI,OACI,qBAAKC,UAAU,OAAf,SACI,qBAAIA,UAAU,aAAd,UACI,sBAAMA,UAAU,YAAhB,wBACA,sBAAMA,UAAU,cAAhB,kC,GANCC,aAaNF,I,uBCyDf,SAASG,IACLC,OAAOC,SAASC,QAAO,GArE3BC,IAAEC,UAAUC,OAAM,WAGAF,IAAE,mBAERG,OAAM,WAEV,IAFoB,EAEhBC,EAAU,IAAIC,IACdC,EAAaN,IAAEO,MAAMC,MAHL,cAMNF,GANM,IAMpB,IAAI,EAAJ,qBAAyB,CAAC,IAAlBG,EAAiB,QAQrB,GALc,SAASA,GACnB,MAAqB,kBAAPA,GAAiC,IAAdA,EAAGC,QAAgB,WAAWC,KAAKF,GAIrEG,CAAQH,GAAI,CAMX,GAJAA,EAAKA,EAAGI,cAIJT,EAAQU,IAAIL,GAIZ,CACA,IAAIM,EAAMX,EAAQY,IAAIP,GACtBL,EAAQa,IAAIR,EAAIM,EAAI,QALpBX,EAAQa,IAAIR,EAAI,GASpB,IAAIE,EAAOF,EAAK,KAAOL,EAAQY,IAAIP,GAEnCS,QAAQC,IAAIV,EAAK,KAAOL,EAAQY,IAAIP,IACpCS,QAAQC,IAAIf,GAGZ,IAAIgB,EAAIpB,IAAE,WACVoB,EAAEC,KAAK,KAAMZ,GAGa,IAAvBT,IAAE,IAAMS,GAAIC,OACXV,IAAE,qBAAqBsB,OAAOtB,IAAEoB,GAAGE,OAAOX,IAI1CX,IAAE,IAAIS,GAAIc,KAAKd,EAAK,KAAOL,EAAQY,IAAIP,IAI3C,IAAI,IAAIe,EAAI,GAAIA,GAAK,GAAIA,IACjBpB,EAAQU,IAAIW,OAAOC,aAAaF,KAChCxB,IAAE,IAAIyB,OAAOC,aAAaF,IAAIG,WAnD1B,qC,IAmEtBC,E,4JACF,WACI,OACI,sBAAKlC,UAAU,iBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,+BACI,sBAAKA,UAAU,aAAf,UACI,0BAAUA,UAAU,eAAemC,GAAG,iBAAiBC,YAAY,kBAAkBC,KAAK,MAC1F,sBAAMF,GAAG,gBAGjB,wBAAQnC,UAAU,kBAAkBsC,KAAK,SAASC,QAASrC,EAA3D,wBAEJ,qBAAKF,UAAU,4B,GAbZC,aAqBJiC,IClFAM,MATf,WACE,OACE,sBAAKxC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCESyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAAS8C,eAAe,SAM1BZ,M","file":"static/js/main.ad4e0bb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"head\">\r\n                <h1 className=\"head-title\">\r\n                    <span className=\"foldscope\">FOLDSCOPE </span>\r\n                    <span className=\"instruments\">INSTRUMENTS</span>\r\n                </h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\n\r\n$(document).ready(function(){\r\n\r\n    // get element in textarea\r\n    var textBox = $('#characterCount');\r\n\r\n    textBox.keyup(function(){\r\n        // set hashmap\r\n        let hashmap = new Map();\r\n        var characters = $(this).val();\r\n\r\n        // iterate each characters\r\n        for(let ch of characters){\r\n\r\n            // check for alphabet characters\r\n            var isAlpha = function(ch){\r\n                return typeof ch === \"string\" && ch.length === 1 && /[A-Za-z]/.test(ch);\r\n            }\r\n\r\n            // update only alphabet characters\r\n            if(isAlpha(ch)){\r\n                //convert into uppercase\r\n                ch = ch.toUpperCase();\r\n\r\n\r\n                //if not in hashmap, create a key and set value to 1\r\n                if(!hashmap.has(ch)){\r\n                    hashmap.set(ch, 1);\r\n                }\r\n                // if already in hashmap, increment value by 1\r\n                else{\r\n                    var occ = hashmap.get(ch);\r\n                    hashmap.set(ch, occ+1);\r\n                }\r\n\r\n                // output format\r\n                var test = ch + \": \" + hashmap.get(ch)\r\n\r\n                console.log(ch + \": \" + hashmap.get(ch))\r\n                console.log(hashmap);\r\n\r\n                // <p> tag with id of each alphabet\r\n                var e = $(\"<p></p>\");\r\n                e.attr('id', ch);\r\n\r\n                // if new hashmap, create new tag\r\n                if($(\"#\" + ch).length === 0) {\r\n                    $(\".output-container\").append($(e).append(test));\r\n                }\r\n                // else update value\r\n                else{\r\n                    $(\"#\"+ch).text(ch + \": \" + hashmap.get(ch));\r\n                }\r\n\r\n                // remove line if certain character doesnt exist in textarea\r\n                for(var i = 65; i <= 90; i++){\r\n                    if(!hashmap.has(String.fromCharCode(i))){\r\n                        $(\"#\"+String.fromCharCode(i)).remove()\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }\r\n        } \r\n    });\r\n})\r\n\r\n// refresh page button\r\nfunction refreshPage(){\r\n    window.location.reload(false);\r\n}\r\n\r\nclass Test extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"test-container\">\r\n                <div className=\"form-container\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <textarea className=\"form-control\" id=\"characterCount\" placeholder=\"Enter text here\" rows=\"6\"></textarea>\r\n                            <span id=\"status\"></span>\r\n                        </div>\r\n                    </form>\r\n                    <button className=\"btn btn-primary\" type=\"submit\" onClick={refreshPage}>Refresh</button>\r\n                </div>\r\n                <div className=\"output-container\">\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;","import './App.css';\nimport React from \"react\";\nimport Header from \"./components/header\";\nimport Test from \"./components/test\";\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}